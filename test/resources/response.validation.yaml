openapi: "3.0.0"
info:
  version: 1.0.0
  title: Swagger Petstore
  description: A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification
  termsOfService: http://swagger.io/terms/
  contact:
    name: Swagger API Team
    email: apiteam@swagger.io
    url: http://swagger.io
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: /v1
tags:
  - test
paths:
  /empty_response:
    description: get empty response
    summary: get empty response
    get:
      tags:
        - test
      description: get empty response
      operationId: get empty resp
      parameters:
        - name: mode
          in: query
          schema:
            type: string
          description: the mode
      responses:
        "200":
          description: empty

  /pets/{id}:
    description: endpoints for pets id
    summary: endpoints for pet by id
    get:
      tags:
        - test
      description: find pet by id
      operationId: findPetById
      parameters:
        - name: id
          in: path
          description: the id
          required: true
          schema:
            type: string
        - name: mode
          description: the mode
          in: query
          schema:
            type: string
      responses:
        "200":
          description: pet response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlatPet"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /object:
    description: endpoints for pets
    summary: endpoints for pets
    get:
      tags:
        - test
      description: test
      operationId: object
      parameters:
        - name: mode
          in: query
          description: mode
          schema:
            type: string
      responses:
        "200":
          description: pet response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Object"
    post:
      tags:
        - test
      description: test
      operationId: postObject
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pet"
      responses:
        "200":
          description: pet response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"

  /pets:
    description: endpoints for pets
    summary: endpoints for pets
    get:
      tags:
        - test
      description: find pets
      operationId: findPets
      parameters:
        - name: mode
          in: query
          schema:
            type: string
      responses:
        "200":
          description: pet response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pet"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /humans:
    get:
      tags:
        - test
      description: find humans
      operationId: humans
      responses:
        "200":
          description: humans response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Human"
            multipart/form-data:
              schema:
                properties:
                  stuff:
                    type: string
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users:
    get:
      tags:
        - Users
      description: test
      summary: Get users
      operationId: getUsers
      parameters: []
      responses:
        "200":
          description: the users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"

  /no_additional_props:
    post:
      tags:
        - test
      description: Get todos
      operationId: getTodos
      responses:
        "200":
          description: no additional props
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoAdditionalProps"

components:
  schemas:
    Object:
      # type: object
      required:
        - name
        - id
      properties:
        id:
          type: integer
          format: int64
        bought_at:
          type: string
          format: date-time
          nullable: true
        name:
          type: string
          nullable: true
        tag:
          type: string
    NewPet:
      required:
        - name
      properties:
        bought_at:
          type: string
          format: date-time
          nullable: true
        name:
          type: string
          nullable: true
        tag:
          type: string

    Pet:
      allOf:
        - $ref: "#/components/schemas/NewPet"
        - required:
            - id
          properties:
            id:
              type: integer
              format: int64

    FlatPet:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        bought_at:
          type: string
          format: date-time
          nullable: true
        name:
          type: string
          nullable: true
        tag:
          type: string

    Users:
      description: "Generic list of values from database schema"
      type: array
      items:
        type: string

    Human:
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        kids:
          type: array
          items:
            $ref: "#/components/schemas/Human"

    NoAdditionalProps:
      type: object
      additionalProperties: false
      properties:
        token_type:
          type: string
        expires_in:
          type: integer
        access_token:
          type: string
        refresh_token:
          type: string
        user:
          additionalProperties: false
          type: object
          required:
            - id
          properties:
            id:
              type: integer
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
